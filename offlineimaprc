[general]

# This specifies where offlineimap is to store its metadata.
# This directory will be created if it does not already exist.

metadata = ~/.offlineimap

# Note launchd invocation will explicitly invoke with  -u quiet
ui = ttyui

accounts = Gmail

# OfflineIMAP can use multiple connections to the server in order
# to perform multiple synchronization actions simultaneously.
# This may place a higher burden on the server.  In most cases,
# setting this value to 2 or 3 will speed up the sync, but in some
# cases, it may slow things down.  The safe answer is 1.  You should
# probably never set it to a value more than 5.

maxconnections = 1

[mbnames]

# offlineimap can record your mailbox names in a format you specify.
# You can define the header, each mailbox item, the separator,
# and the footer.  Here is an example for Mutt.
# If enabled is yes, all six setting must be specified, even if they
# are just the empty string "".
#
# The header, peritem, sep, and footer are all Python expressions passed
# through eval, so you can (and must) use Python quoting.

enabled = yes
filename = ~/.muttrc.mailboxes
header = "mailboxes "
peritem = "+%(foldername)s"
sep = " "
footer = "\n"
folderfilter = lambda accountname, foldername: foldername not in ['[Gmail].All Mail',]

[Account Gmail]
########## Basic settings

# These settings specify the two folders that you will be syncing.
# You'll need to have a "Repository ..." section for each one.

localrepository = Gmail-Local
remoterepository = Gmail-Remote

[Repository Gmail-Local]

# This is one of the two repositories that you'll work with given the
# above example.  Each repository requires a "type" declaration.
#
# The types supported are Maildir and IMAP.
#

type = Maildir

# Specify local repository.  Your IMAP folders will be synchronized
# to maildirs created under this path.  OfflineIMAP will create the
# maildirs for you as needed.

localfolders = ~/Mail/Gmail

[Repository Gmail-Remote]
# A repository using Gmail's IMAP interface.  Any configuration
# parameter of `IMAP` type repositories can be used here.  Only
# `remoteuser` (or `remoteusereval` ) is mandatory.  Default values
# for other parameters are OK, and you should not need fiddle with
# those.
#
# The Gmail repository will use hard-coded values for `remotehost`,
# `remoteport`, `tunnel` and `ssl`.  (See
# http://mail.google.com/support/bin/answer.py?answer=78799&topic=12814)
# Any attempt to set those parameters will be silently ignored.
#

type = Gmail
# You can specify which folders to sync.  You can do it several ways.
# I'll provide some examples.  The folderfilter operates on the
# *UNTRANSLATED* name, if you specify nametrans.  It should return
# true if the folder is to be included; false otherwise.
#
# Example 1: synchronizing only INBOX and Sent.
#
# folderfilter = lambda foldername: foldername in ['INBOX', 'Sent']
folderfilter = lambda foldername: foldername not in ['[Gmail]/Important',]

# Specify the Gmail user name. This is the only mandatory parameter.
remoteuser     = chris.perl@gmail.com
remotepassfile = ~/.offlineimap.passwd

# Deleting a message from a Gmail folder via the IMAP interface will
# just remove that folder's label from the message: the message will
# continue to exist in the '[Gmail]/All Mail' folder.  If `realdelete`
# is set to `True`, then deleted messages will really be deleted
# during `offlineimap` sync, by moving them to the '[Gmail]/Trash'
# folder.  BEWARE: this will delete a messages from *all folders* it
# belongs to!
#
# See http://mail.google.com/support/bin/answer.py?answer=77657&topic=12815
realdelete = no

# 2012-07-06
# Adding cert_fingerprint for imap.gmail.com
cert_fingerprint = b0ba392bba326e6feb1add4d04fa0fb86cd173fa
